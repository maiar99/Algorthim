# here we first define our list of lists
# each list contain 3 values 
# 1st refers to start time 
# 2end refers to end time 
# 3rd refers to profit

jobs = [[1, 6, 6], [2, 5, 5], [5, 7, 5], [6, 8, 3]]

# the main function 

def find_max_profit(jobs):
    jobs.sort(key=lambda x: x[1])  # we will sorting our lists depend on (end time)
    n = len(jobs)
    x = [0] * n     #list that will be used to keep track of the maximum profit at each index up to n and have initial values 0
    x[0] = jobs[0][2]  #the first element will be initialy the profit of first jop of the list after sorting
    for j in range(1, n):  # binary search for loop
        # find the latest job that ends before job j starts
        low, high = 0, j-1
        while low <= high:
            mid = (low + high) // 2
            if jobs[mid][1] <= jobs[j][0]:
                low = mid + 1
            else:
                high = mid - 1
        i = high
        # compute the maximum profit by considering jobs up to j
        profit = jobs[j][2]
        if i >= 0:
            profit += x[i]
        x[j] = max(profit, x[j-1])
    return x[n-1]
    
    
    
   max_profit = find_max_profit(jobs)
print(max_profit)  
